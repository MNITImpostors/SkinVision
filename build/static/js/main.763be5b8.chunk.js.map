{"version":3,"sources":["Components/Navbar.js","Components/Loader.js","Components/Result.js","Components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["className","id","style","type","color","height","width","timeout","resultProp","useState","loading","setLoading","useEffect","setInterval","Loader","Landing","state","showResults","result","handleClick","document","getElementById","click","handleChange","e","preventDefault","data","FormData","append","uploadInput","files","fetch","method","body","then","response","json","scores","y","split","parseFloat","setState","catch","error","console","Navbar","this","name","ref","accept","onChange","size","onClick","Result","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gYAEgB,aACZ,OACI,oCACI,yBAAKA,UAAU,cACX,yBAAKA,UAAU,kBAAf,cAIA,yBAAKA,UAAU,uCAAuCC,GAAG,+BAA+BC,MAAO,CAAC,gBAAmB,cAAe,WAAc,UAC5I,wBAAIF,UAAU,8BAA8BE,MAAO,CAAC,gBAAmB,qB,uBCR5E,aACd,OACC,oCACC,kBAAC,IAAD,CACCC,KAAK,OACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,QCRE,cAAqB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACJC,oBAAS,GADL,mBAC3BC,EAD2B,KAClBC,EADkB,KASlC,OANAC,qBAAU,WACTC,aAAY,WACXF,GAAW,KACT,OACD,IAGF,oCACED,GACA,yBAAKV,UAAU,cACd,kBAACc,EAAD,OAGDJ,GACA,yBAAKV,UAAU,4BACd,yDAA8B,0BAAMA,UAAU,eAAeQ,O,OCqDnDO,E,4MApEdC,MAAO,CACNC,aAAa,EACbC,OAAQ,I,EAGTC,YAAc,WACGC,SAASC,eAAe,eAC9BC,S,EAEXC,aAAe,SAACC,GACfA,EAAEC,iBACF,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQ,EAAKC,YAAYC,MAAM,IAC3CC,MAAM,+BAAgC,CACrCC,OAAQ,OACRC,KAAMP,IACJQ,MAAK,SAACC,GACRA,EAASC,OAAOF,MAAK,SAACD,GACrB,IAEII,EAFOJ,EAAKK,EAAEC,MAAM,MACR,GACEA,MAAM,KAEXC,WAAWH,EAAO,IACfG,WAAWH,EAAO,IAGjC,EAAKI,UAAS,iBAAO,CAACvB,OAAQ,aAE9B,EAAKuB,UAAS,iBAAO,CAACvB,OAAQ,sBAG9BwB,OAAM,SAACC,GACTC,QAAQD,MAAMA,MAEf,EAAKF,UAAS,iBAAO,CAACxB,aAAa,O,uDAE3B,IAAD,OACP,OACC,oCACC,kBAAC4B,EAAD,MACCC,KAAK9B,MAAMC,aACX,yBAAKf,MAAO,CAAC,UAAa,QACzB,wBAAIF,UAAU,kBAAd,qBACA,0BAAMA,UAAU,WAAWC,GAAG,oBAC7B,yBAAKD,UAAU,cACd,2BAAOG,KAAK,OAAO4C,KAAK,SAASC,IAAK,SAACA,GAAU,EAAKnB,YAAcmB,GAAQC,OAAO,cAAchD,GAAG,cAAciD,SAAUJ,KAAKvB,eACjI,2BAAOtB,GAAG,cACT,yBAAKA,GAAG,SACP,yBAAKA,GAAG,SACP,kBAAC,IAAD,CAAYkD,KAAM,GAAInD,UAAU,UAEjC,8CACA,0BAAMC,GAAG,kBAAkBD,UAAU,MAAMoD,QAASN,KAAK3B,aAAzD,aAIH,8BAIF2B,KAAK9B,MAAMC,aACX,kBAACoC,EAAD,CAAQ7C,WAAcsC,KAAK9B,MAAME,c,GA9DhBoC,IAAMC,WCabC,MARf,WACE,OACE,yBAAKxD,UAAU,iBACf,kBAAC,EAAD,QCDgByD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASC,eAAe,SDyHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2B,c","file":"static/js/main.763be5b8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default  () => {\n    return (\n        <>\n            <div className=\"navbar-div\">\n                <div className=\"navbar-heading\">\n                    SkinVision\n                </div>\n\n                <div className=\"collapse navbar-collapse navbar-list\" id=\"bs-example-navbar-collapse-1\" style={{\"backgroundColor\": \"transparent\", \"marginLeft\": \"700px\"}}>\n                    <ul className=\"nav navbar-nav navbar-right\" style={{\"backgroundColor\": \"transparent\"}}>\n                        \n                    </ul>\n                </div>\n            </div>\n       </>\n    )\n\n}","import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nexport default () => {\n\treturn (\n\t\t<>\n\t\t\t<Loader\n\t\t\t\ttype=\"Bars\"\n\t\t\t\tcolor=\"#000000\"\n\t\t\t\theight={120}\n\t\t\t\twidth={120}\n\t\t\t\ttimeout={5000} //3 secs\n      \t\t/>\n\t\t</>\n\t)\n}","import React, {useState, useEffect} from 'react';\nimport Loader from './Loader';\n\nexport default ({ resultProp }) => {\n\tconst [loading, setLoading] = useState(true)\n\t\n\tuseEffect(() => {\n\t\tsetInterval(() => {\n\t\t\tsetLoading(false);\n\t\t}, 5000)\n\t}, [])\n\n\treturn (\n\t\t<>\n\t\t\t{loading && (\n\t\t\t\t<div className=\"loader-div\">\n\t\t\t\t\t<Loader />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{loading || (\n\t\t\t\t<div className=\"result-section container\">\n\t\t\t\t\t<h2>The uploaded skin cell is <span className=\"result-text\">{resultProp}</span></h2>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t)\n}","import React from 'react';\nimport Navbar from './Navbar';\nimport Result from './Result';\nimport { FaDownload } from \"react-icons/fa\";\n\nclass Landing extends React.Component {\n\tstate ={\n\t\tshowResults: false,\n\t\tresult: \"\"\n\t}\n\n\thandleClick = () => {\n\t\tvar fileInput = document.getElementById('file-upload');\n\t\tfileInput.click()\n\t}\n\thandleChange = (e) => {\n\t\te.preventDefault();\n\t\tconst data = new FormData();\n\t\tdata.append('file', this.uploadInput.files[0]);\n\t\tfetch('http://localhost:5000/upload', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data\n\t\t}).then((response) => {\n\t\t\tresponse.json().then((body) => {\n\t\t\t\tlet nums = body.y.split(\"[[\");\n\t\t\t\tlet str1 = nums[1];\n\t\t\t\tlet scores = str1.split(\" \");\n\t\t\t\t\n\t\t\t\tlet benign = parseFloat(scores[0]);\n\t\t\t\tlet malignant = parseFloat(scores[1]);\n\n\t\t\t\tif(benign > malignant) {\n\t\t\t\t\tthis.setState(() => ({result: \"Benign\"}))\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState(() => ({result: \"Malignant\"}))\n\t\t\t\t}\n\t\t\t});\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t});\n\t\tthis.setState(() => ({showResults: true}))\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Navbar />\n\t\t\t\t{this.state.showResults || (\n\t\t\t\t\t<div style={{\"marginTop\": \"10%\"}}>\t\n\t\t\t\t\t\t<h2 className=\"uploader-title\">Upload Skin Image</h2>\n\t\t\t\t\t\t<form className=\"uploader\" id=\"file-upload-form\">\n\t\t\t\t\t\t\t<div className=\"upload-div\">\n\t\t\t\t\t\t\t\t<input type=\"file\" name=\"resume\" ref={(ref) => { this.uploadInput = ref; }} accept=\".jpg, .jpeg\" id=\"file-upload\" onChange={this.handleChange}/>\n\t\t\t\t\t\t\t\t<label id=\"file-label\" >\n\t\t\t\t\t\t\t\t\t<div id=\"start\">\n\t\t\t\t\t\t\t\t\t\t<div id=\"icons\">\n\t\t\t\t\t\t\t\t\t\t\t<FaDownload size={60} className=\"icon\"/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>Select a file</div>\n\t\t\t\t\t\t\t\t\t\t<span id=\"file-upload-btn\" className=\"btn\" onClick={this.handleClick}>Upload</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{this.state.showResults && (\n\t\t\t\t\t<Result resultProp = {this.state.result}/>\n\t\t\t\t)}\n\t\t\t</>\n\t\t)\n\t}\n};\n\nexport default Landing;","import React from 'react';\n\nimport './css/landing.css';\nimport './css/navbar.css';\nimport './css/result.css'\nimport './App.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nimport Landing from './Components/Landing'\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n\t\t  <Landing />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}